@page "/"
@inherits AuthenticatedComponentBase
@inject PrayerTimeService PrayerTimesService
@inject HttpClient httpClient
@attribute [RoleAuthorization("admin")]

<PageTitle>PrayerTimes</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">PrayerTimes</MudText>
@*Counter *@
<MudPaper Elevation="10">
    <MudBlazorPages.Components.CountDown nextPrayerText="@nextPrayerText" CounterValue="@CounterValue" ></MudBlazorPages.Components.CountDown>
</MudPaper>
@*Grid*@
<MudDataGrid T="PrayerTime" Items="@_prayerTimes.Today" Bordered="true" Dense="true" Breakpoint="Breakpoint.None" ReadOnly="@(!IsInRole("admin"))"
EditMode="DataGridEditMode.Form" EditTrigger=DataGridEditTrigger.OnRowClick StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
    <Columns>
        <PropertyColumn Property="x => x.Name" Sortable="false" Editable="false"/>
        <PropertyColumn Property="x => GetPrayerTime(x)" Title="Adhan" Sortable="false">
            <EditTemplate>
                @if (CanEditAdhan(context.Item))
                {
                    <MudTextField T="TimeSpan?" Label="Adhan" InputType="InputType.Time" @bind-Value="AdhanTimeEditValue" />
                }
            </EditTemplate>
         </PropertyColumn>
        <PropertyColumn Property="x => GetIqamahTime(x)" Title="Iqamah" Sortable="false" >
             <EditTemplate>
                 @if (CanEdit(context.Item))
                {
                    <MudSwitch @bind-Value="@usingOffset" Color="Color.Primary">Use Offset</MudSwitch>
                    @if (usingOffset)
                    {
                        <MudNumericField @bind-Value="OffsetValue" Label="Iqamah offset" Variant="Variant.Outlined" Step="1" />
                    }
                    else
                    {
                        <MudTextField T="TimeSpan?" Label="Iqamah" InputType="InputType.Time" @bind-Value="timeEditValue" />
                    }

                }
                else
                {
                    <MudChip T="string" Color="Color.Info">Can't edit @(context.Item.Name)</MudChip>
                }
            </EditTemplate> 
        </PropertyColumn>
    </Columns>
</MudDataGrid>
@*Friday pryaer time*@
<MudPaper Elevation="10">
    <MudText Align="Align.Center">Jummuah prayer is fixed at <b>@FridayPrayerTimeString</b>.</MudText>
</MudPaper>
@*Time format switch*@
<MudSwitch T="bool" Value="@timeFormat24" ValueChanged="OnTimeValueChanged" Color="Color.Primary" Label="Time Format 24" />
@*debug*@
<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show debug messages">
        @foreach (var message in debugMessages)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (debugMessages.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => debugMessages.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private PrayerTimesResult _prayerTimes;
    private PrayerTimeWithIqamah[] BallyhaunisMosqueData;
    private bool timeFormat24 { get; set; } = false;
    private bool loading;
    private string loadingString = "loading";
    private string _FridayPrayerTimeString = "";
    private string FridayPrayerTimeString { 
        get 
        {
            _FridayPrayerTimeString = GetJummuhaPrayer();
            return _FridayPrayerTimeString;
        }
        set { _FridayPrayerTimeString = value; }
    }
    //counter
    private double CounterValue { get; set; }
    private string nextPrayerText = "loading";
    private bool _disposed;
    //edit
    private bool usingOffset { get; set; }
    int OffsetValue;
    TimeSpan? timeEditValue;
    TimeSpan? AdhanTimeEditValue;
    //debug
    private List<string> debugMessages = new();
    int maxLoopValue = 99;

    PrayerSettings settings = new PrayerSettings
    {
        HijriOffset = 0,
        JamaahMethods = new List<string> { "", "", "", "", "" },
        JamaahOffsets = new List<List<int>>
        {
            new List<int> { 0, 15 },
            new List<int> { 1, 0 },
            new List<int> { 0, 30 },
            new List<int> { 0, 15 },
            new List<int> { 0, 10 },
            new List<int> { 0, 0 }
        }
    };

    private string GetJummuhaPrayer()
    {
        string result = "Loading";
        if(!loading && BallyhaunisMosqueData != null)
        {
            var time = DateTime.Parse(BallyhaunisMosqueData[6].Iqamah);
            if (timeFormat24)
            {
                result = time.ToString("HH:mm");
            }
            else
            {
                result = time.ToString("hh:mmtt");
            }
        }
        return result;
    }

    private void OnTimeValueChanged(bool value)
    {
        timeFormat24 = value;
    }

    // initial setup
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetupData(); // must be first line 
    }

    async Task SetupData()
    {
        loading = true;
        _prayerTimes = PrayerTimesService.CalculatePrayers(settings);
        BallyhaunisMosqueData = await httpClient.GetFromJsonAsync<PrayerTimeWithIqamah[]>("https://mosqueapp.api.alotaki.com/prayerTimes");

        if (BallyhaunisMosqueData != null)
        {
            for (int i = 0; i < BallyhaunisMosqueData.Length; i++)
            {
                PrayerTimeWithIqamah currentIqamahData = BallyhaunisMosqueData[i];
                PrayerTime currentPrayer = i <= 5 ? _prayerTimes.Today[i] : _prayerTimes.Today[4];

                if (BallyhaunisMosqueData[i].Name.ToLower().Contains("shurooq") || i > 5)
                {
                    continue;
                }

                if (string.IsNullOrEmpty(BallyhaunisMosqueData[i].Iqamah))
                {
                    var offset = int.Parse(BallyhaunisMosqueData[i].Offset);
                    _prayerTimes.Today[i].JamaahTime = _prayerTimes.Today[i].Time.AddMinutes(offset);
                }
                else
                {
                    DateTime result;
                    string iqamahString = BallyhaunisMosqueData[i].Iqamah;
                    if (!TryGetIqamah(iqamahString,out result))
                    {
                        continue;
                    }
                    _prayerTimes.Today[i].JamaahTime = result;
                }
            }
            FridayPrayerTimeString = GetJummuhaPrayer();
        }
        loading = BallyhaunisMosqueData == null;
        _ = SimulateProgressAsync(); // Fire and forget
    }

    private bool TryGetIqamah(string inString, out DateTime result)
    {
        string iqamahString = inString;
        if (!DateTime.TryParse(iqamahString, out result))
        {
            if (iqamahString.Length == 4)
            {
                iqamahString = iqamahString.Insert(2, ":");
                if (!DateTime.TryParse(iqamahString, out result))
                {
                    return false;
                }
            }
        }
        return true;
    }

    private bool CanEdit(PrayerTime item)
    {
        if (!IsInRole("admin"))
        {
            return false;
        }

        if (item.Name.Contains("Shurooq", StringComparison.CurrentCultureIgnoreCase))
        {
            return false;
        }

        if (item.Name.Contains("isha", StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        return true;
    }

    private bool CanEditAdhan(PrayerTime item)
    {
        if (!IsInRole("admin"))
        {
            return false;
        }

        if (item.Name.Contains("isha", StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        return false;
    }

    // events
    void StartedEditingItem(PrayerTime item)
    {
        PrayerTimeWithIqamah currentData;
        if (BallyhaunisMosqueData != null && CanEdit(item))
        {
            currentData = BallyhaunisMosqueData[item.Index];
            if (currentData.Iqamah.Length <=0)
            {
                usingOffset = true;
                OffsetValue = int.Parse(currentData.Offset);
                timeEditValue = null;
            }else
            {
                usingOffset = false;
                OffsetValue = 0;
                if (currentData.Iqamah.Contains(':'))
                {
                    var hoursAndminutes = currentData.Iqamah.Split(':');
                    var hours = int.Parse(hoursAndminutes[0]);
                    var minutes = int.Parse(hoursAndminutes[1]);
                    timeEditValue = new TimeSpan(hours, minutes, 0);
                }else
                {
                    DateTime result;
                    string iqamahString = currentData.Iqamah;
                    if (TryGetIqamah(iqamahString, out result))
                    {
                        timeEditValue = new TimeSpan(result.Hour, result.Minute, 0);
                    }
                }
            }
        }
        debugMessages.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)} OffsetValue = {OffsetValue} timeEditValue = {timeEditValue}");
    }

    void CanceledEditingItem(PrayerTime item)
    {
        debugMessages.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)} OffsetValue = {OffsetValue} timeEditValue = {timeEditValue}");
    }

    void CommittedItemChanges(PrayerTime item)
    {
        //todo update the table 
        debugMessages.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)} OffsetValue = {OffsetValue} timeEditValue = {timeEditValue}");
    }

    protected string GetIqamahTime(PrayerTime prayer)
    {
        if (loading)
        {
            return loadingString;
        }

        if (prayer.Name.Contains("Shurooq", StringComparison.CurrentCultureIgnoreCase))
        {
            return "N/A";
        }

        if (timeFormat24)
        {
            return prayer.Get24IgamaTime();
        }
        return prayer.JamaahTime.ToString("hh:mmtt");
    }

    protected string GetPrayerTime(PrayerTime prayer)
    {
        if (loading)
        {
            return loadingString;
        }

        if (prayer.Name.Equals("Isha",StringComparison.OrdinalIgnoreCase))
        {
            // get the prayer time from the data
        }

        if (timeFormat24)
        {
            return prayer.Get24AdhanTime();
        }
        return prayer.Time.ToString("hh:mmtt");
    }

    // countdown loop
    private async Task SimulateProgressAsync()
    {
        while (CounterValue <= maxLoopValue && !_disposed)
        {
            if (!loading)
            {
                TimeSpan timeLeft = _prayerTimes.Next.Time - DateTime.Now;
                string formattedTime = timeLeft.ToString(@"hh\:mm\:ss");
                nextPrayerText = string.Format($"{_prayerTimes.Next.Name} in {formattedTime}");
                CounterValue = _prayerTimes.CalcPercentage(now:DateTime.Now);
                StateHasChanged();
            }
            await Task.Delay(1000);
            if (!debugMessages.Contains(CounterValue.ToString()))
            {
                debugMessages.Add(CounterValue.ToString());
            }
        }
        await SetupData();
        debugMessages.Add($"max loop {maxLoopValue}");
        CounterValue = _prayerTimes.CalcPercentage();
    }


    public void Dispose() => _disposed = true;
}