@page "/login"
@inherits AuthenticatedComponentBase
@using System.ComponentModel.DataAnnotations
@inject ISnackbar SBar

<MudText Typo="Typo.h4">Login</MudText>
<MudForm @ref="form" @bind-IsValid="@success">
    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="Email" />
    <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" 
    OnAdornmentClick="ShowHidePassword" AdornmentAriaLabel="Show Password" />
    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="OnSignIn">Login</MudButton>
    </div>
</MudForm>

@code {

    private MudForm form;
    private string Password { get; set; } = "";
    private string Email { get; set; } = "";
    private bool success;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowHidePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void OnSignIn()
    {
        try
        {
            await FirebaseAuthService.SignInWithEmailAndPasswordAsync(Email, Password);
            SBar.Add($"{Email} Logedin successful!", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            SBar.Add($"Registration failed: {ex.Message}", Severity.Error);
        }
    }
}